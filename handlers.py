import aiohttp
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import Form

router = Router()

def setup_handlers(dp):
    dp.include_router(router)

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–æ–¥—É, –∫–∞–ª–æ—Ä–∏–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")

# –ö–æ–º–∞–Ω–¥–∞ /set_profile
@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(Form.weight)

@router.message(Form.weight)
async def process_weight(message: Message, state: FSMContext):
    await state.update_data(weight=int(message.text))
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(Form.height)

@router.message(Form.height)
async def process_height(message: Message, state: FSMContext):
    await state.update_data(height=int(message.text))
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Form.age)

@router.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=int(message.text))
    await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(Form.activity)

@router.message(Form.activity)
async def process_activity(message: Message, state: FSMContext):
    await state.update_data(activity=message.text)
    await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(Form.city)

@router.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    global users

    users[user_id] = {
        "weight": data["weight"],
        "height": data["height"],
        "age": data["age"],
        "activity": data["activity"],
        "city": message.text,
        "water_goal": data["weight"] * 30,
        "calorie_goal": 10 * data["weight"] + 6.25 * data["height"] - 5 * data["age"]
    }

    await message.reply("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–æ–¥—É –∏ –∫–∞–ª–æ—Ä–∏–∏.")
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /log_water
@router.message(Command("log_water"))
async def log_water(message: Message, users: dict):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    try:
        amount = int(message.text.split()[1])
        users[user_id]["logged_water"] = users[user_id].get("logged_water", 0) + amount
        remaining = users[user_id]["water_goal"] - users[user_id]["logged_water"]
        await message.reply(f"–í—ã –≤—ã–ø–∏–ª–∏ {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å {max(0, remaining)} –º–ª –¥–æ –Ω–æ—Ä–º—ã.")
    except (IndexError, ValueError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª>")

# –ö–æ–º–∞–Ω–¥–∞ /log_food
@router.message(Command("log_food"))
async def log_food(message: Message, users: dict):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    product = " ".join(message.text.split()[1:])
    if not product:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>")
        return

    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product}&json=true") as response:
            data = await response.json()
            products = data.get('products', [])
            if products:
                first_product = products[0]
                calories = first_product.get('nutriments', {}).get('energy-kcal_100g', 0)
                users[user_id]["logged_calories"] = users[user_id].get("logged_calories", 0) + calories
                await message.reply(f"üçΩ {product}: {calories} –∫–∫–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
            else:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /check_progress
@router.message(Command("check_progress"))
async def check_progress(message: Message, users: dict):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    progress = (f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
                f"–í–æ–¥–∞: {users[user_id].get('logged_water', 0)} –º–ª –∏–∑ {users[user_id]['water_goal']} –º–ª\n"
                f"–ö–∞–ª–æ—Ä–∏–∏: {users[user_id].get('logged_calories', 0)} –∫–∫–∞–ª –∏–∑ {users[user_id]['calorie_goal']} –∫–∫–∞–ª")
    await message.reply(progress)
